#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// output to Fragment Shader
out vec4 v_color;

out vec3 normal;          // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector[3];     // Vector from the vertex to the Light in View Space
						  // Length of lightVector is the distance between light and vertex

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform;

// light position
uniform vec4 WorldLightPosition[3]; // if w = 1: Point light, if w = 0: directional light


void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectionTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	v_color = vec4(vertexColor, 1.0f);

	// Normal of the the vertex, in camera space
	vec4 normalC = MV* vec4(vertexNormal_modelspace,0);
	normal = vec3(normalC[0],normalC[1],normalC[2]);
	
	// Vector that goes from the vertex to the camera, in camera space. In camera space, the camera is at the origin (0,0,0).
	vec4 vertexPosition_cameraspace = MV* vec4(vertexPosition_modelspace,1);
	vec4 cam = vec4(0,0,0,0) - vertexPosition_cameraspace;
	eyeVector = vec3(cam[0], cam[1], cam[2]);

	// Vector that goes from the vertex to the light, in camera space. 
	
	vec4 LightPosition_cameraspace = vec4(0.0f,0.0f,0.0f,0.0f);

	
		
		for(int i = 0; i< 3; i++)
		{
			LightPosition_cameraspace = ViewTransform * WorldLightPosition[i];
		lightVector[i] = (LightPosition_cameraspace + vec4(eyeVector, 0));

		}

		
	
		
}

